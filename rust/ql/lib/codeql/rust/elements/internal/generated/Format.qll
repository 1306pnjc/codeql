// generated by codegen, do not edit
/**
 * This module provides the generated definition of `Format`.
 * INTERNAL: Do not import directly.
 */

private import codeql.rust.elements.internal.generated.Synth
private import codeql.rust.elements.internal.generated.Raw
import codeql.rust.elements.FormatArgsExpr
import codeql.rust.elements.FormatArgument
import codeql.rust.elements.internal.LocatableImpl::Impl as LocatableImpl

/**
 * INTERNAL: This module contains the fully generated definition of `Format` and should not
 * be referenced directly.
 */
module Generated {
  /**
   * A format element in a formatting template. For example the `{}` in:
   * ```rust
   * println!("Hello {}", "world");
   * ```
   * or the `{value:#width$.precision$}` in:
   * ```rust
   * println!("Value {value:#width$.precision$}");
   * ```
   * INTERNAL: Do not reference the `Generated::Format` class directly.
   * Use the subclass `Format`, where the following predicates are available.
   */
  class Format extends Synth::TFormat, LocatableImpl::Locatable {
    override string getAPrimaryQlClass() { result = "Format" }

    /**
     * Gets the parent of this format.
     */
    FormatArgsExpr getParent() { none() }

    /**
     * Gets the index of this format.
     */
    int getIndex() { none() }

    /**
     * Gets the `index`th argument of this format (0-based).
     */
    FormatArgument getArgument(int index) { none() }

    /**
     * Gets any of the arguments of this format.
     */
    final FormatArgument getAnArgument() { result = this.getArgument(_) }

    /**
     * Gets the number of arguments of this format.
     */
    final int getNumberOfArguments() { result = count(int i | exists(this.getArgument(i))) }
  }
}
