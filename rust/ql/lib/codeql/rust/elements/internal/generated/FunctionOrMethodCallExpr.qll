// generated by codegen, do not edit
/**
 * This module provides the generated definition of `FunctionOrMethodCallExpr`.
 * INTERNAL: Do not import directly.
 */

private import codeql.rust.elements.internal.generated.Synth
private import codeql.rust.elements.internal.generated.Raw
import codeql.rust.elements.ArgList
import codeql.rust.elements.Attr
import codeql.rust.elements.internal.ExprImpl::Impl as ExprImpl

/**
 * INTERNAL: This module contains the fully generated definition of `FunctionOrMethodCallExpr` and should not
 * be referenced directly.
 */
module Generated {
  /**
   * A function or method call expression. See `CallExpr` and `MethodCallExpr` for further details.
   * INTERNAL: Do not reference the `Generated::FunctionOrMethodCallExpr` class directly.
   * Use the subclass `FunctionOrMethodCallExpr`, where the following predicates are available.
   */
  class FunctionOrMethodCallExpr extends Synth::TFunctionOrMethodCallExpr, ExprImpl::Expr {
    /**
     * Gets the argument list of this function or method call expression, if it exists.
     */
    ArgList getArgList() {
      result =
        Synth::convertArgListFromRaw(Synth::convertFunctionOrMethodCallExprToRaw(this)
              .(Raw::FunctionOrMethodCallExpr)
              .getArgList())
    }

    /**
     * Holds if `getArgList()` exists.
     */
    final predicate hasArgList() { exists(this.getArgList()) }

    /**
     * Gets the `index`th attr of this function or method call expression (0-based).
     */
    Attr getAttr(int index) {
      result =
        Synth::convertAttrFromRaw(Synth::convertFunctionOrMethodCallExprToRaw(this)
              .(Raw::FunctionOrMethodCallExpr)
              .getAttr(index))
    }

    /**
     * Gets any of the attrs of this function or method call expression.
     */
    final Attr getAnAttr() { result = this.getAttr(_) }

    /**
     * Gets the number of attrs of this function or method call expression.
     */
    final int getNumberOfAttrs() { result = count(int i | exists(this.getAttr(i))) }
  }
}
