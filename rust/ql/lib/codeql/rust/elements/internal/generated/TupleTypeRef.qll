// generated by codegen, do not edit
/**
 * This module provides the generated definition of `TupleTypeRef`.
 * INTERNAL: Do not import directly.
 */

private import codeql.rust.elements.internal.generated.Synth
private import codeql.rust.elements.internal.generated.Raw
import codeql.rust.elements.TypeRef
import codeql.rust.elements.internal.TypeRefImpl::Impl as TypeRefImpl

/**
 * INTERNAL: This module contains the fully generated definition of `TupleTypeRef` and should not
 * be referenced directly.
 */
module Generated {
  /**
   * A TupleTypeRef. For example:
   * ```rust
   * todo!()
   * ```
   * INTERNAL: Do not reference the `Generated::TupleTypeRef` class directly.
   * Use the subclass `TupleTypeRef`, where the following predicates are available.
   */
  class TupleTypeRef extends Synth::TTupleTypeRef, TypeRefImpl::TypeRef {
    override string getAPrimaryQlClass() { result = "TupleTypeRef" }

    /**
     * Gets the `index`th field of this tuple type reference (0-based).
     */
    TypeRef getField(int index) {
      result =
        Synth::convertTypeRefFromRaw(Synth::convertTupleTypeRefToRaw(this)
              .(Raw::TupleTypeRef)
              .getField(index))
    }

    /**
     * Gets any of the fields of this tuple type reference.
     */
    final TypeRef getAField() { result = this.getField(_) }

    /**
     * Gets the number of fields of this tuple type reference.
     */
    final int getNumberOfFields() { result = count(int i | exists(this.getField(i))) }
  }
}
