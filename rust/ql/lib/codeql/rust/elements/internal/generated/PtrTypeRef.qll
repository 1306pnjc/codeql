// generated by codegen, do not edit
/**
 * This module provides the generated definition of `PtrTypeRef`.
 * INTERNAL: Do not import directly.
 */

private import codeql.rust.elements.internal.generated.Synth
private import codeql.rust.elements.internal.generated.Raw
import codeql.rust.elements.TypeRef
import codeql.rust.elements.internal.TypeRefImpl::Impl as TypeRefImpl

/**
 * INTERNAL: This module contains the fully generated definition of `PtrTypeRef` and should not
 * be referenced directly.
 */
module Generated {
  /**
   * A PtrTypeRef. For example:
   * ```rust
   * todo!()
   * ```
   * INTERNAL: Do not reference the `Generated::PtrTypeRef` class directly.
   * Use the subclass `PtrTypeRef`, where the following predicates are available.
   */
  class PtrTypeRef extends Synth::TPtrTypeRef, TypeRefImpl::TypeRef {
    override string getAPrimaryQlClass() { result = "PtrTypeRef" }

    /**
     * Holds if this ptr type reference is const.
     */
    predicate isConst() { Synth::convertPtrTypeRefToRaw(this).(Raw::PtrTypeRef).isConst() }

    /**
     * Holds if this ptr type reference is mut.
     */
    predicate isMut() { Synth::convertPtrTypeRefToRaw(this).(Raw::PtrTypeRef).isMut() }

    /**
     * Gets the type reference of this ptr type reference, if it exists.
     */
    TypeRef getTy() {
      result =
        Synth::convertTypeRefFromRaw(Synth::convertPtrTypeRefToRaw(this).(Raw::PtrTypeRef).getTy())
    }

    /**
     * Holds if `getTy()` exists.
     */
    final predicate hasTy() { exists(this.getTy()) }
  }
}
