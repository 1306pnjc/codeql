// generated by codegen, do not edit
/**
 * This module provides the generated definition of `PathTypeRef`.
 * INTERNAL: Do not import directly.
 */

private import codeql.rust.elements.internal.generated.Synth
private import codeql.rust.elements.internal.generated.Raw
import codeql.rust.elements.Path
import codeql.rust.elements.internal.TypeRefImpl::Impl as TypeRefImpl

/**
 * INTERNAL: This module contains the fully generated definition of `PathTypeRef` and should not
 * be referenced directly.
 */
module Generated {
  /**
   * A type referring to a path. For example:
   * ```rust
   * type X = std::collections::HashMap<i32, i32>;
   * type Y = X::Item;
   * ```
   * INTERNAL: Do not reference the `Generated::PathTypeRef` class directly.
   * Use the subclass `PathTypeRef`, where the following predicates are available.
   */
  class PathTypeRef extends Synth::TPathTypeRef, TypeRefImpl::TypeRef {
    override string getAPrimaryQlClass() { result = "PathTypeRef" }

    /**
     * Gets the path of this path type reference, if it exists.
     */
    Path getPath() {
      result =
        Synth::convertPathFromRaw(Synth::convertPathTypeRefToRaw(this).(Raw::PathTypeRef).getPath())
    }

    /**
     * Holds if `getPath()` exists.
     */
    final predicate hasPath() { exists(this.getPath()) }
  }
}
