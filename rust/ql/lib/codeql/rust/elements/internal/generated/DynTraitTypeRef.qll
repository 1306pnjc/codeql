// generated by codegen, do not edit
/**
 * This module provides the generated definition of `DynTraitTypeRef`.
 * INTERNAL: Do not import directly.
 */

private import codeql.rust.elements.internal.generated.Synth
private import codeql.rust.elements.internal.generated.Raw
import codeql.rust.elements.TypeBoundList
import codeql.rust.elements.internal.TypeRefImpl::Impl as TypeRefImpl

/**
 * INTERNAL: This module contains the fully generated definition of `DynTraitTypeRef` and should not
 * be referenced directly.
 */
module Generated {
  /**
   * A DynTraitTypeRef. For example:
   * ```rust
   * todo!()
   * ```
   * INTERNAL: Do not reference the `Generated::DynTraitTypeRef` class directly.
   * Use the subclass `DynTraitTypeRef`, where the following predicates are available.
   */
  class DynTraitTypeRef extends Synth::TDynTraitTypeRef, TypeRefImpl::TypeRef {
    override string getAPrimaryQlClass() { result = "DynTraitTypeRef" }

    /**
     * Gets the type bound list of this dyn trait type reference, if it exists.
     */
    TypeBoundList getTypeBoundList() {
      result =
        Synth::convertTypeBoundListFromRaw(Synth::convertDynTraitTypeRefToRaw(this)
              .(Raw::DynTraitTypeRef)
              .getTypeBoundList())
    }

    /**
     * Holds if `getTypeBoundList()` exists.
     */
    final predicate hasTypeBoundList() { exists(this.getTypeBoundList()) }
  }
}
