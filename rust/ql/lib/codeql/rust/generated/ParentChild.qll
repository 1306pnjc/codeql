// generated by codegen
/**
 * This module provides the generated parent/child relationship.
 */

import codeql.rust.elements

private module Impl {
  private Element getImmediateChildOfElement(Element e, int index, string partialPredicateCall) {
    none()
  }

  private Element getImmediateChildOfFile(File e, int index, string partialPredicateCall) {
    exists(int b, int bElement, int n |
      b = 0 and
      bElement = b + 1 + max(int i | i = -1 or exists(getImmediateChildOfElement(e, i, _)) | i) and
      n = bElement and
      (
        none()
        or
        result = getImmediateChildOfElement(e, index - b, partialPredicateCall)
      )
    )
  }

  private Element getImmediateChildOfLocatable(Locatable e, int index, string partialPredicateCall) {
    exists(int b, int bElement, int n |
      b = 0 and
      bElement = b + 1 + max(int i | i = -1 or exists(getImmediateChildOfElement(e, i, _)) | i) and
      n = bElement and
      (
        none()
        or
        result = getImmediateChildOfElement(e, index - b, partialPredicateCall)
      )
    )
  }

  private Element getImmediateChildOfLocation(Location e, int index, string partialPredicateCall) {
    exists(int b, int bElement, int n |
      b = 0 and
      bElement = b + 1 + max(int i | i = -1 or exists(getImmediateChildOfElement(e, i, _)) | i) and
      n = bElement and
      (
        none()
        or
        result = getImmediateChildOfElement(e, index - b, partialPredicateCall)
      )
    )
  }

  private Element getImmediateChildOfDbFile(DbFile e, int index, string partialPredicateCall) {
    exists(int b, int bFile, int n |
      b = 0 and
      bFile = b + 1 + max(int i | i = -1 or exists(getImmediateChildOfFile(e, i, _)) | i) and
      n = bFile and
      (
        none()
        or
        result = getImmediateChildOfFile(e, index - b, partialPredicateCall)
      )
    )
  }

  private Element getImmediateChildOfDbLocation(DbLocation e, int index, string partialPredicateCall) {
    exists(int b, int bLocation, int n |
      b = 0 and
      bLocation = b + 1 + max(int i | i = -1 or exists(getImmediateChildOfLocation(e, i, _)) | i) and
      n = bLocation and
      (
        none()
        or
        result = getImmediateChildOfLocation(e, index - b, partialPredicateCall)
      )
    )
  }

  private Element getImmediateChildOfDeclaration(
    Declaration e, int index, string partialPredicateCall
  ) {
    exists(int b, int bLocatable, int n |
      b = 0 and
      bLocatable = b + 1 + max(int i | i = -1 or exists(getImmediateChildOfLocatable(e, i, _)) | i) and
      n = bLocatable and
      (
        none()
        or
        result = getImmediateChildOfLocatable(e, index - b, partialPredicateCall)
      )
    )
  }

  private Element getImmediateChildOfUnknownFile(
    UnknownFile e, int index, string partialPredicateCall
  ) {
    exists(int b, int bFile, int n |
      b = 0 and
      bFile = b + 1 + max(int i | i = -1 or exists(getImmediateChildOfFile(e, i, _)) | i) and
      n = bFile and
      (
        none()
        or
        result = getImmediateChildOfFile(e, index - b, partialPredicateCall)
      )
    )
  }

  private Element getImmediateChildOfUnknownLocation(
    UnknownLocation e, int index, string partialPredicateCall
  ) {
    exists(int b, int bLocation, int n |
      b = 0 and
      bLocation = b + 1 + max(int i | i = -1 or exists(getImmediateChildOfLocation(e, i, _)) | i) and
      n = bLocation and
      (
        none()
        or
        result = getImmediateChildOfLocation(e, index - b, partialPredicateCall)
      )
    )
  }

  private Element getImmediateChildOfFunction(Function e, int index, string partialPredicateCall) {
    exists(int b, int bDeclaration, int n |
      b = 0 and
      bDeclaration =
        b + 1 + max(int i | i = -1 or exists(getImmediateChildOfDeclaration(e, i, _)) | i) and
      n = bDeclaration and
      (
        none()
        or
        result = getImmediateChildOfDeclaration(e, index - b, partialPredicateCall)
      )
    )
  }

  private Element getImmediateChildOfModule(Module e, int index, string partialPredicateCall) {
    exists(int b, int bDeclaration, int n, int nDeclaration |
      b = 0 and
      bDeclaration =
        b + 1 + max(int i | i = -1 or exists(getImmediateChildOfDeclaration(e, i, _)) | i) and
      n = bDeclaration and
      nDeclaration = n + 1 + max(int i | i = -1 or exists(e.getDeclaration(i)) | i) and
      (
        none()
        or
        result = getImmediateChildOfDeclaration(e, index - b, partialPredicateCall)
        or
        result = e.getDeclaration(index - n) and
        partialPredicateCall = "Declaration(" + (index - n).toString() + ")"
      )
    )
  }

  cached
  Element getImmediateChild(Element e, int index, string partialAccessor) {
    // why does this look more complicated than it should?
    // * none() simplifies generation, as we can append `or ...` without a special case for the first item
    none()
    or
    result = getImmediateChildOfDbFile(e, index, partialAccessor)
    or
    result = getImmediateChildOfDbLocation(e, index, partialAccessor)
    or
    result = getImmediateChildOfUnknownFile(e, index, partialAccessor)
    or
    result = getImmediateChildOfUnknownLocation(e, index, partialAccessor)
    or
    result = getImmediateChildOfFunction(e, index, partialAccessor)
    or
    result = getImmediateChildOfModule(e, index, partialAccessor)
  }
}

/**
 * Gets the "immediate" parent of `e`. "Immediate" means not taking into account node resolution: for example
 * if `e` has conversions, `getImmediateParent(e)` will give the innermost conversion in the hidden AST.
 */
Element getImmediateParent(Element e) {
  // `unique` is used here to tell the optimizer that there is in fact only one result
  // this is tested by the `library-tests/parent/no_double_parents.ql` test
  result = unique(Element x | e = Impl::getImmediateChild(x, _, _) | x)
}

/**
 * Gets the immediate child indexed at `index`. Indexes are not guaranteed to be contiguous, but are guaranteed to be distinct. `accessor` is bound the member predicate call resulting in the given child.
 */
Element getImmediateChildAndAccessor(Element e, int index, string accessor) {
  exists(string partialAccessor |
    result = Impl::getImmediateChild(e, index, partialAccessor) and
    accessor = "get" + partialAccessor
  )
}

/**
 * Gets the child indexed at `index`. Indexes are not guaranteed to be contiguous, but are guaranteed to be distinct. `accessor` is bound the member predicate call resulting in the given child.
 */
Element getChildAndAccessor(Element e, int index, string accessor) {
  exists(string partialAccessor |
    result = Impl::getImmediateChild(e, index, partialAccessor).resolve() and
    accessor = "get" + partialAccessor
  )
}
