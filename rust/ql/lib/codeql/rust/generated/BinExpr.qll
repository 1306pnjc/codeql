// generated by codegen
/**
 * This module provides the generated definition of `BinExpr`.
 * INTERNAL: Do not import directly.
 */

private import codeql.rust.generated.Synth
private import codeql.rust.generated.Raw
import codeql.rust.elements.Expr

/**
 * INTERNAL: This module contains the fully generated definition of `BinExpr` and should not
 * be referenced directly.
 */
module Generated {
  /**
   * A binary operation expression. For example:
   * ```
   * x + y;
   * x && y;
   * x <= y;
   * x = y;
   * x += y;
   * ```
   * INTERNAL: Do not reference the `Generated::BinExpr` class directly.
   * Use the subclass `BinExpr`, where the following predicates are available.
   */
  class BinExpr extends Synth::TBinExpr, Expr {
    override string getAPrimaryQlClass() { result = "BinExpr" }

    /**
     * Gets the lhs of this bin expression.
     */
    Expr getLhs() {
      result = Synth::convertExprFromRaw(Synth::convertBinExprToRaw(this).(Raw::BinExpr).getLhs())
    }

    /**
     * Gets the rhs of this bin expression.
     */
    Expr getRhs() {
      result = Synth::convertExprFromRaw(Synth::convertBinExprToRaw(this).(Raw::BinExpr).getRhs())
    }

    /**
     * Gets the op of this bin expression, if it exists.
     */
    string getOp() { result = Synth::convertBinExprToRaw(this).(Raw::BinExpr).getOp() }

    /**
     * Holds if `getOp()` exists.
     */
    final predicate hasOp() { exists(this.getOp()) }
  }
}
